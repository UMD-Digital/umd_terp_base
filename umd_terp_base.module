<?php

/**
 * @file
 */

use GuzzleHttp\Client;
use Drupal\Component\Serialization\Json;

/**
 * Implements hook_preprocess_paragraph().
 *
 * @param $variables
 *   Adds some them settings/info to paragraphs.
 */
function umd_terp_base_preprocess_paragraph(&$variables) {
  // Need some theme settings for asset path/etc.
  _umd_terp_extend_theme_variables($variables);
}

/**
 * Implements hook_toolbar().
 * 
 * Adds admin edit links/tabs in toolbar, so we dont need to have directly on the page.
 */
function umd_terp_base_toolbar() {
  $links = [];
  $local_tasks = menu_local_tasks();

  if (empty($local_tasks['tabs'])) {
    return $links;
  }

  foreach ($local_tasks['tabs'] as $route_name => $value) {
    // Add to array by #weight so that we have the correct order
    $links[$value['#weight']] = $value['#link'];
  }

  // Sort into correct order
  ksort($links);

  // Add the menu local tasks into the toolbar.
  $items['local_tasks'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'html_tag',
      '#tag' => 'button',
      '#value' => t('Edit'),
      '#attributes' => [
        'title' => t('Local tasks'),
        'class' => ['toolbar-icon', 'toolbar-icon-edit'],
      ],
      '#cache' => [
        'contexts' => [
          'url.path',
        ],
      ],
    ],
    'tray' => [
      '#heading' => t('Local tasks'),
      'toolbar_administration' => [
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
        '#links' => $links,
        '#theme' => 'links__toolbar_MY_MODULE',
      ],
    ],
    '#weight' => 1000,
  ];
  return $items;
}

/**
 * Custom functions for the External Data Source Plugins, and content calls to the HUB.
 *
 * Gets taxonomies/term ID's/etc from the HUB Middleware.
 */
function _umd_terp_base_middleware_get($query) {
  $graphQLquery = '{"query": "query { ' . $query . ' } "}';
  $response = (new Client)->request('post', 'https://umd-hub.herokuapp.com/graphql', [
    'headers' => [
      'Content-Type' => 'application/json',
    ],
    'body' => $graphQLquery,
  ]);
  $result = Json::decode($response->getBody());
  return $result;
}

/**
 * Taxonomy Terms, format response.
 */
function _umd_terp_base_middleware_format_taxonomy($response) {
  $collection = [];
  foreach ($response['data']['taxonomy']['data'] as $entry) {
    // Workaround to set as a text string, as a bug prevents from setting simply a number, even as string.
    $collection[] = [
      'value' => $entry['tid'],
      'label' => $entry['name'],
    ];
  }
  return $collection;
}

/**
 * Taxonomy Terms, set query.
 */
function _umd_terp_base_middleware_taxonomy($taxonomy) {
  $query = 'taxonomy(filter: {vocabulary: \"' . $taxonomy . '\"}) { data { tid name } }';
  return _umd_terp_base_middleware_get($query);
}
