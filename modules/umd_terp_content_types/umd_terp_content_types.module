<?php

/**
 * @file
 * Module file for umd_content_types module.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function umd_terp_content_types_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.umd_terp_content_types':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_node().
 *
 * Add Does some preprocessing on different umd terp content types.
 */
function umd_terp_content_types_preprocess_node(&$variables) {

  // Specific variables/etc per type.
  $node = $variables['elements']['#node'];
  $view_mode = $variables['view_mode'];
  $bundle = $node->bundle();
  $nid = $node->id();
  $variables['nid'] = $nid;
  // Link URL for all teasers, as most need them.
  if ($view_mode !== 'full') {
    $variables['link'] = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);
  }
  // Content type specific overrides.
  if ($bundle == 'umd_terp_article') {
    // Article.
    if ($view_mode == 'full') {
      $categories = $node->field_umdt_ct_article_categories->getValue();
      // See if the articles path was overwritten in theme settings.
      $articles_url = '/articles';
      $articles_theme_url = theme_get_setting('umd_terp_articles_path');
      if($articles_theme_url !== '') {
        $articles_url = $articles_theme_url;
      }
      if (!empty($categories)) {
        $categories_formatted = _umd_terp_content_types_format_term_links($categories, $articles_url . '?field_umdt_ct_article_categories=');
        $variables['categories'] = $categories_formatted;
      }
    }
  }
  elseif ($bundle == 'umd_terp_person') {
    // Person.
    if ($view_mode == 'full') {
      $departments = $node->field_umdt_ct_person_departments->getValue();
      if (!empty($departments)) {
        // Keep link empty for now, as there is not yet a view based by department.
        $departments_formatted = _umd_terp_content_types_format_term_links($departments, NULL);
        $variables['departments'] = $departments_formatted;
      }
    }
    if ($node->field_umdt_ct_person_phone->getValue()) {
      $variables['phone'] = $node->field_umdt_ct_person_phone->getString();
      $variables['phone_link'] = preg_replace('/[^0-9]/', '', $variables['phone']);
      if ($node->field_umdt_ct_person_phone_ext->getValue()) {
        $variables['phone_ext'] = $node->field_umdt_ct_person_phone_ext->getString();
        $variables['phone_link'] .= ' ' . preg_replace('/[^0-9]/', '', $variables['phone_ext']);
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the some filter options on views pages.
 */
function umd_terp_content_types_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-articles-with-filters') {
    $form['field_umdt_ct_article_author']['#type'] = 'select';
    $form['field_umdt_ct_article_author']['#multiple'] = FALSE;
    $form['field_umdt_ct_article_author']['#empty_option'] = t('- Any -');
    unset($form['field_umdt_ct_article_author']['#size']);
    unset($form['field_umdt_ct_article_author']['#default_value']);
    $options = [];
    $nodes = _umd_terp_content_types_get_people();
    $i = 1;
    foreach ($nodes as $node) {
      $title = $node->getTitle();
      $options[$node->id()] = $title;
      $i++;
    }
    $form['field_umdt_ct_article_author']['#options'] = $options;
  }
}

/**
 * CUSTOM FUNCTIONS.
 */

/**
 * Format taxonomy term links to go to a views page and preformat it.
 */
function _umd_terp_content_types_format_term_links(&$terms, $link) {
  if (count($terms)) {
    $formatted = [];
    foreach ($terms as $key => $item) {
      $tid = $item['target_id'];
      $term = Term::load($tid);
      $adj_link = NULL;
      if($link !== NULL) {
        $adj_link = $link . $tid;
      }
      $cat = [
        'title' => $term->getName(),
        'link'  => $adj_link,
      ];
      $formatted[] = $cat;
    }
    return $formatted;
  }
  else {
    return NULL;
  }
}

/**
 * Returns People.
 */
function _umd_terp_content_types_get_people() {
  // Get cache if it's there.
  if ($cache = \Drupal::cache()->get('umd_terp_content_types__people')) {
    return $cache->data;
  }
  else {
    $storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
    $nids = $storage->accessCheck(TRUE);
    // Gather published artist nodes and sort by title. Get only people tagged as "Article Authors", to cut down on excess.
    $nids = $nids->condition('type', 'umd_terp_person')
      ->condition('status', 1)
      ->condition('field_umdt_ct_person_author_stat', TRUE)
      ->sort('title')
      ->execute();
    $result = $storage->loadMultiple($nids);
    // Set cache.
    if ($result) {
      \Drupal::cache()->set('umd_terp_content_types__people', $result, time() + 7200);
      return $result;
    }
    else {
      return NULL;
    }
  }
}
