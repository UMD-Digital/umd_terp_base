<?php

/**
 * @file
 * Ut_events module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\umd_terp_base\UmdTerpBase;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function ut_events_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.ut_events':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      } else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_paragraph().
 *
 *   This sets variables for getting events, and then gets events, and displays.
 */
function ut_events_preprocess_paragraph__ut_events(&$variables)
{

  // UUID to pass for cache.
  $uuid = $variables['elements']['#paragraph']->uuid->value;

  // Check on Location Type filter.
  $location_type = NULL;
  if (isset($variables['elements']['#paragraph']->field_ut_events_location_type->value)) {
    $location_type = _ut_events_format_filters($variables['elements']['#paragraph']->field_ut_events_location_type->getValue());
  }

  // Check on Campus Location filter.
  $campus_location = NULL;
  if (isset($variables['elements']['#paragraph']->field_ut_events_campus_location->value)) {
    $campus_location = _ut_events_format_filters($variables['elements']['#paragraph']->field_ut_events_campus_location->getValue());
  }

  // Check on Campus Unit filter.
  $campus_unit = NULL;
  if (isset($variables['elements']['#paragraph']->field_ut_events_campus_units->value)) {
    $campus_unit = _ut_events_format_filters($variables['elements']['#paragraph']->field_ut_events_campus_units->getValue());
  }

  // Check on Tags filter.
  $tags = NULL;
  if (isset($variables['elements']['#paragraph']->field_ut_events_tags->value)) {
    $tags = _ut_events_format_filters($variables['elements']['#paragraph']->field_ut_events_tags->getValue());
  }

  // Check on Count.
  $count = 3;
  if (isset($variables['elements']['#paragraph']->field_ut_events_count->value)) {
    $count = $variables['elements']['#paragraph']->field_ut_events_count->value;
  }

  // Get events.
  $variables['ut_events_list'] = _ut_events_get_events(
    $location_type,
    $campus_location,
    $campus_unit,
    $tags,
    $count,
    $uuid
  );
}

/**
 * Implements hook_theme().
 *
 * Lets us define our paragraphs templates in this module.
 */
function ut_events_theme($existing, $type, $theme, $path)
{
  return [
    'paragraph__ut_events' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_field_WIDGET_TYPE_paragraphs_form_alter().
 *
 * Adds "Content Tips" helper text to the paragraph.
 */
function ut_events_field_widget_paragraphs_form_alter(&$element, &$form_state, $context)
{
  if ($element['#paragraph_type'] == 'ut_events') {
    // Tips text.
    $markup = '<ul>';
    $markup .= '<li><strong>IMPORTANT!</strong> You must configure bearer token on the <a href="/admin/config/umd_terp_base/config">UMD Terp Modules configuration</a> page.</li>';
    $markup .= '<li><strong>Limit the count shown.</strong> We strongly recommend limiting to Three, or Six.</li>';
    $markup .= '<li><strong>More filters may mean fewer results.</strong> Filters are additive. Each event must meet all filtered requirements. Apply filters selectively.</li>';
    $markup .= '<li><strong>Clear your caches after saving a new filter combination.</strong> Calls to the Calendar API are cached for efficiency. To view updated results, clear the cache every time you update this widget.</li>';
    $markup .= '<li><a target="_blank" href="/admin/help/ut_events">Events Feed Module Help</a></li>';
    $markup .= '</ul>';

    $element['ut_events_tips'] = [
      '#type' => 'details',
      '#title' => t('UMD Calendar Events Feed Content Tips'),
      '#weight' => -1000,
    ];
    $element['ut_events_tips']['#markup'] = $markup;
  }
}

/**
 * CUSTOM FUNCTIONS.
 */

/**
 * Formats multiple filters to send to the graphql endpoint.
 *
 */
function _ut_events_format_filters($filter)
{
  $result = '';
  foreach ($filter as $key => $value) {
    $result = intval($filter[$key]['value']);
  }
  return $result;
}

/**
 * Gets events from Calendar, and displays.
 *
 * See https://umd-calendar-staging.cl-umd-edu-1.servd.dev/admin/graphiql for self documentation.
 */
function _ut_events_get_events(
  $location_type = NULL,
  $campus_location = NULL,
  $campus_unit = NULL,
  $tags = NULL,
  $range = 3,
  $id = 'events-default'
) {
  if ($cache = \Drupal::cache()->get('ut_events--' . $id)) {
    return $cache->data;
  } else {
    $fields = 'id title slug url allDay multiDay startDate endDate ... on communications_Event { id summary: commonRichTextTwo description: commonRichText image: commonAssetHeroImageSingle { url } } ... on submission_Event { id summary: commonRichTextTwo description: commonRichText image: commonAssetHeroImageSingle { url ... on placeholders_Asset { id altText:alt } ... on heroImages_Asset { id altText:commonPlainTextTwo }}}';
    $query = 'getEvents{solspace_calendar{events(limit:' . $range . ',loadOccurrences: true,rangeStart:\\"today\\"';
    if ($location_type !== NULL || $campus_location !== NULL || $campus_unit !== NULL || $tags !== NULL) {
      $taxonomies = [];
      if (isset($location_type)) {
        $taxonomies[] = $location_type;
      }
      if (isset($campus_location)) {
        $taxonomies[] = $campus_location;
      }
      if (isset($campus_unit)) {
        $taxonomies[] = $campus_unit;
      }
      if (isset($tags)) {
        $taxonomies[] = $tags;
      }
      $query .= 'relatedTo: [' . implode(", ", $taxonomies) . ']';
    }
    $query .= '){' . $fields . '}}}';
    $result = UmdTerpBase::middleware_get_events($query);

    if (isset($result['data'])) {
      $result = $result['data']['solspace_calendar']['events'];
      \Drupal::cache()->set('ut_events--' . $id, $result, time() + 900);
      return $result;
    } else {
      return NULL;
    }
  }

}